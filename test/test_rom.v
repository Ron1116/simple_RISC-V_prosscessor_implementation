/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */
module DIG_ROM_65536X8_code (
    input [15:0] A,
    input sel,
    output reg [7:0] D
);
    reg [7:0] my_rom [0:105];

    always @ (*) begin
        if (~sel)
            D = 8'hz;
        else if (A > 16'h69)
            D = 8'h0;
        else
            D = my_rom[A];
    end

    initial begin
        my_rom[0] = 8'h2b;
        my_rom[1] = 8'h2b;
        my_rom[2] = 8'h2b;
        my_rom[3] = 8'h2b;
        my_rom[4] = 8'h2b;
        my_rom[5] = 8'h2b;
        my_rom[6] = 8'h2b;
        my_rom[7] = 8'h2b;
        my_rom[8] = 8'h5b;
        my_rom[9] = 8'h3e;
        my_rom[10] = 8'h2b;
        my_rom[11] = 8'h2b;
        my_rom[12] = 8'h2b;
        my_rom[13] = 8'h2b;
        my_rom[14] = 8'h5b;
        my_rom[15] = 8'h3e;
        my_rom[16] = 8'h2b;
        my_rom[17] = 8'h2b;
        my_rom[18] = 8'h3e;
        my_rom[19] = 8'h2b;
        my_rom[20] = 8'h2b;
        my_rom[21] = 8'h2b;
        my_rom[22] = 8'h3e;
        my_rom[23] = 8'h2b;
        my_rom[24] = 8'h2b;
        my_rom[25] = 8'h2b;
        my_rom[26] = 8'h3e;
        my_rom[27] = 8'h2b;
        my_rom[28] = 8'h3c;
        my_rom[29] = 8'h3c;
        my_rom[30] = 8'h3c;
        my_rom[31] = 8'h3c;
        my_rom[32] = 8'h2d;
        my_rom[33] = 8'h5d;
        my_rom[34] = 8'h3e;
        my_rom[35] = 8'h2b;
        my_rom[36] = 8'h3e;
        my_rom[37] = 8'h2b;
        my_rom[38] = 8'h3e;
        my_rom[39] = 8'h2d;
        my_rom[40] = 8'h3e;
        my_rom[41] = 8'h3e;
        my_rom[42] = 8'h2b;
        my_rom[43] = 8'h5b;
        my_rom[44] = 8'h3c;
        my_rom[45] = 8'h5d;
        my_rom[46] = 8'h3c;
        my_rom[47] = 8'h2d;
        my_rom[48] = 8'h5d;
        my_rom[49] = 8'h3e;
        my_rom[50] = 8'h3e;
        my_rom[51] = 8'h2e;
        my_rom[52] = 8'h3e;
        my_rom[53] = 8'h2d;
        my_rom[54] = 8'h2d;
        my_rom[55] = 8'h2d;
        my_rom[56] = 8'h2e;
        my_rom[57] = 8'h2b;
        my_rom[58] = 8'h2b;
        my_rom[59] = 8'h2b;
        my_rom[60] = 8'h2b;
        my_rom[61] = 8'h2b;
        my_rom[62] = 8'h2b;
        my_rom[63] = 8'h2b;
        my_rom[64] = 8'h2e;
        my_rom[65] = 8'h2e;
        my_rom[66] = 8'h2b;
        my_rom[67] = 8'h2b;
        my_rom[68] = 8'h2b;
        my_rom[69] = 8'h2e;
        my_rom[70] = 8'h3e;
        my_rom[71] = 8'h3e;
        my_rom[72] = 8'h2e;
        my_rom[73] = 8'h3c;
        my_rom[74] = 8'h2d;
        my_rom[75] = 8'h2e;
        my_rom[76] = 8'h3c;
        my_rom[77] = 8'h2e;
        my_rom[78] = 8'h2b;
        my_rom[79] = 8'h2b;
        my_rom[80] = 8'h2b;
        my_rom[81] = 8'h2e;
        my_rom[82] = 8'h2d;
        my_rom[83] = 8'h2d;
        my_rom[84] = 8'h2d;
        my_rom[85] = 8'h2d;
        my_rom[86] = 8'h2d;
        my_rom[87] = 8'h2d;
        my_rom[88] = 8'h2e;
        my_rom[89] = 8'h2d;
        my_rom[90] = 8'h2d;
        my_rom[91] = 8'h2d;
        my_rom[92] = 8'h2d;
        my_rom[93] = 8'h2d;
        my_rom[94] = 8'h2d;
        my_rom[95] = 8'h2d;
        my_rom[96] = 8'h2d;
        my_rom[97] = 8'h2e;
        my_rom[98] = 8'h3e;
        my_rom[99] = 8'h3e;
        my_rom[100] = 8'h2b;
        my_rom[101] = 8'h2e;
        my_rom[102] = 8'h3e;
        my_rom[103] = 8'h2b;
        my_rom[104] = 8'h2b;
        my_rom[105] = 8'h2e;
    end
endmodule


module test_rom (
  input [15:0] in,
  output [7:0] out
);
  // code
  DIG_ROM_65536X8_code DIG_ROM_65536X8_code_i0 (
    .A( in ),
    .sel( 1'b1 ),
    .D( out )
  );
endmodule
